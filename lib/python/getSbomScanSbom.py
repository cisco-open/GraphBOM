# MIT License

# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


from subprocess import run, PIPE, Popen
import json
import os
import platform
from python import getVulnerabilityCVEInfo as gve
from python import DatabaseConnection as dbc
# import getVulnerabilityCVEInfo as gve
# import DatabaseConnection as dbc
import hashlib


"""
This method returns two objects: 1. Software Bill of Materials of the repo 2. Vulnerabilities of the repo
The SBOM is generated by syft tool and which is based on the SPDX format. For more details please visit: https://github.com/anchore/syft
The Vulnerabilities are scanned by grype tool, it scans all the packages and generates CVE IDs. Please visit https://github.com/anchore/grype, more details.  

"""
# Get loggedin user name with path from the root
loggedin_user  = os.path.expanduser('~')
# gitrepo_dir = loggedin_user+'/gitrepo/data'
# gitrepo_dir = '/Users/saimamidi/Desktop/GraphPathChang/GraphBOM/gitrepo/data'
gitrepo_dir = os.getenv("FILE_PATH")+'/gitrepo/data'

# Check git_repo dir exists 
isGitrepos = os.path.exists(gitrepo_dir)

# Get Current Operating System the user is loggedin
os_platform = platform.platform()

# syft - SBOM of a repo, grype - Vulnerability scanner
syft = "https://github.com/anchore/syft"
grype = "https://github.com/anchore/grype"

# # download latest syft and grype
# syft_cmd = f"curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b {loggedin_user}"
# Popen(syft_cmd, stdout=PIPE, shell=True)

# grype_cmd = f"curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b {loggedin_user}"
# Popen(grype_cmd, stdout=PIPE, shell=True)


# Check SBOM tool available or not
# isSBOM = os.path.exists(loggedin_user+'/syft')

syft_path = os.getenv("FILE_PATH")+"/syft"
grype_path = os.getenv("FILE_PATH")+"/grype"
isSBOM = os.path.exists(syft_path)
# isScan = os.path.exists(loggedin_user+'/grype')
isScan = os.path.exists(grype_path)
# os.chdir(f"{loggedin_user}")


# download the sbom-tool to logged in user location
if not isSBOM and not isScan and 'macOS' in os_platform:
    print(f" SBOM ans Scanner not available for this {os_platform} and place it to {loggedin_user}...!")
    print(f"download suft from : {syft}")
    print(f"download suft from : {grype}")
elif not isSBOM and not isScan and 'Linux' in os_platform:
    print(f"SBOM and scanner not available for this {os_platform} and place it to {loggedin_user} ...!")
    print(f"download suft from : {syft}")
    print(f"download suft from : {grype}")
elif not isSBOM and not isScan and 'Windows' in os_platform:
    print(f"Other than Linix and MacOS Plaform : {os_platform}")
    print(f"download suft from : {syft}")
    print(f"download suft from : {grype}")
else:
    print(f"The grype and syft tools are available in {loggedin_user} at {loggedin_user}")

def generateScan( repo_gitfolder_path):
    """
    generateScan
        - args - local git repo path
        - returns a JSON object which ciontaines a CVE IDs security aspects 
    """
    print(repo_gitfolder_path)
    sbom_cmd = f'{grype_path} {repo_gitfolder_path} -o json'
    capture_cmd_result = Popen(sbom_cmd, stdout=PIPE, shell=True)
    vulObj = json.loads((capture_cmd_result.communicate()[0]))
    if 'matches' in vulObj:
        return  vulObj['matches']
    else:
        return None
    

def generate_SBOM(repo_gitfolder_path):
    """
    generateSBOM
        - args - local git repo path
        - object structure is standard SPDX - Software Package Data Exchange format  
        - returns a SBOm of repo as JSON object 
    """
    print(repo_gitfolder_path)
    sbom_cmd = f'{syft_path} {repo_gitfolder_path} -o spdx-json'
    capture_cmd_result = Popen(sbom_cmd, stdout=PIPE, shell=True)
    sbomObj = json.loads((capture_cmd_result.communicate()[0]))
    if 'packages' in sbomObj:
        return  sbomObj['packages']
    else:
        return None 

def get_Scan_SBOM(git_repo_dir, uri, isSbom, graphHash):
    """
    getScanSBOM
        - args
            - local git repo
            - git URl
            - isSbom - generating SBOM or Vulnarability scanner?
    """
    git_uri = uri
    repo_name_with_extension = git_uri.split('/')[-1]
    repo_name = repo_name_with_extension.split('.')[0]
    print(f"Git URL===> {git_uri}")
    print(f"Local Reponame ===> {repo_name}")
    repo_gitfolder = git_repo_dir + "/" + repo_name
    print(repo_gitfolder)
    isRepoExists = os.path.exists(repo_gitfolder)

    if isRepoExists:
        if isSbom == 'scan':
            print(f"Git repo Scanning" )
            res =  generateScan(repo_gitfolder)
            if res:
                VlunObj = []
                temp_obj = []
                temp_vlun = set()
                for item in res:
                    if not item['vulnerability']['id'] in temp_vlun:
                        temp_vlun.add(item['vulnerability']['id'])
                        temp_obj.append ((item['vulnerability']['id'], item['vulnerability']['dataSource'], 
                                item['vulnerability']['severity'], item['vulnerability']['description']))
                    
                    VlunObj.append({'pack_name': item['artifact']['name'], 'location': item['artifact']['locations'][0]['path'],
                    'cve_id':item['vulnerability']['id'], 'source_url':item['vulnerability']['dataSource'], 
                    'severity':item['vulnerability']['severity'], 'description':item['vulnerability']['description'] })
                
                return VlunObj
            else:
                return "None"
        elif isSbom == 'sbom':
            print("Git repo SBOM")
            res =  generate_SBOM(repo_gitfolder)
            if res:
                sbomObj = []
                version = set()
                for item in res:
                    if 'versionInfo' in item:
                        if item['versionInfo'] not in version :
                            version.add(item['versionInfo'])
                            sbomObj.append({'SPDXID': item['SPDXID'], 'sourec_url':item['name'], 
                            'externalRefs': item['externalRefs'][-1]['referenceLocator'],
                            'sourceInfo':item['sourceInfo'].split(':')[-1], 'versionInfo': item['versionInfo'] })
                    else:
                        sbomObj
                
                if graphHash:
                    try:
                        print(f"********Graph HASH==> {graphHash}*********")
                    except Exception as e:
                        print("Exception raised for SBOM hash creation...")

                return sbomObj

            else:
                return "None"
    else:
        print("Git clone ERROR")
        return "ERROR"

def getSbom_Scan_Sbom(name_space_uri, isSbom, graphHash):
    return get_Scan_SBOM(gitrepo_dir, name_space_uri, isSbom, graphHash)
